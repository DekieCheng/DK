


<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <meta http-equiv="X-UA-Compatible" content="IE=11">
    <link href="/Content/B11Site.css" rel="stylesheet" />
    <link href="/Content/bootstrap-3.3.5-dist/css/bootstrap.css" rel="stylesheet" />
    <link href="/Content/Font-Awesome3.2.1/css/font-awesome.css" rel="stylesheet" />
    <link href="/Content/DataTables/css/dataTables.bootstrap.css" rel="stylesheet" />
    <link href="/Content/zTree.min.css" rel="stylesheet" />
    <link href="/Content/zTree.theme.metro.css" rel="stylesheet" type="text/css" />
    <link href="/Content/Layer/theme/default/layer.css" rel="stylesheet" />
    <link href="/Content/DataTables/css/fixedColumns.dataTables.min.css" rel="stylesheet" type="text/css" />
    <link href="/Content/DataTables/css/fixedColumns.bootstrap.min.css" rel="stylesheet" type="text/css" />
    <link href="/Content/bootstrap-datetimepicker.min.css" rel="stylesheet" type="text/css" />
    <link href="/Content/bootstrap-fileinput/css/fileinput.min.css" rel="stylesheet" />
    <script src="/Scripts/jquery-2.2.3.min.js"></script>
    <script src="/Scripts/bootstrap.min.js"></script>
    <script src="/Scripts/jquery.cookie.js"></script>
    <script src="/Scripts/jquery.dataTables.min.js"></script>
    <script src="/Scripts/dataTables.fixedColumns.min.js"></script>
    <script src="/Scripts/dataTables.bootstrap.js" type="text/javascript"></script>
    <script src="/Scripts/bootstrap-select.min.js" type="text/javascript"></script>
    <script src="/Scripts/bootstrap-datetimepicker.min.js" type="text/javascript"></script>
    <script src="/Scripts/fileinput.min.js" type="text/javascript"></script>
    <script src="/Scripts/jquery.ztree.all-3.5.min.js" type="text/javascript"></script>
    <script src="/Scripts/echarts.min.js"></script>
    <script src="/Scripts/common.js"></script>
    <script src="/Scripts/numeral.js"></script>
    <script src="/Scripts/bootbox.min.js"></script>
    <script src="/Scripts/json2.js" type="text/javascript"></script>
    <script src="/Scripts/jquery.x_import.js" type="text/javascript"></script>
    <script src="/Scripts/JSLINQ.js" type="text/javascript"></script>
    <script src="/Scripts/jquery.table2excel.min.js"></script>
    <script src="/Scripts/jquery.x_modal.js"></script>
    <script src="/Scripts/jslinq.min.js"></script>
    <script src="/Content/Layer/layer.js"></script>
    <title>FG Allocation Dashboard</title>
    <style>
        .sys-box {
            width: 250px;
            height: 130px;
            text-align: center;
            word-wrap: break-word;
            background-color: #434343;
            color: white;
            float: left;
            padding-top: 0px;
            //box-shadow: 1px 1px 1px #888888;
            border-radius: 3px;
            cursor: pointer;
        }

        td {
            color: #fff;
        }
    </style>
</head>
<body style="background-color:black">
    <div id="gaugechart" class="container-fluid">
        <div class="row" style="margin-top:16px">
            <img class="col-md-1" src="/Content/img/logo-big-white.png" />
            <div class="search">
                <h1 class="bg-dark bg-font-dark col-md-11" style="margin-top:5px;padding-bottom:0px;text-align:center"><font id="FGAllocation" color="white"></font></h1>
            </div>
        </div>
    </div>

    <div class="container-fluid">
        <div class="row" style="margin-top:18px;padding-top:0px;">
            <h1 class="bg-dark bg-font-dark col-md-11" style="margin-top:0px;padding-bottom:0px;text-align:center"><font id="FGInventory" color="white"></font></h1>
        </div>
        <div class="row" style="margin-top:0px;padding-top:0px;">
            <div id="moneybar" style="width:100%;height:320px;padding-top:0px;">
            </div>
        </div>
    </div>
    <script>
       var cols = ['Project', 'Total', 'Occupied', 'Occupied_Rate', 'Vacant', 'Vacant_Rate'];
       $(function () {
            getmrbdata();
            //setInterval(getmrbdata, 100 * 10000);
           // getmrbdata1();
           //setInterval(getmrbdata1, 10 * 10000);
        });
        function getmrbdata() {
            var index = layer.load(0, { shade: false }); //0代表加载的风格，支持0-2
            $.post('/pack/GetpicAllocationData', null, function (result) {
                c = result.Data.length / 5;
                //console.log(result);
                linqobj = null;
                linqobj = jslinq(result.Data);
                let total = linqobj.sum(function (el) { return el.QTY })
                $("#FGAllocation").html('Daily FG Allocation Dashboard_(Total:' + total+')');
                for (var i = 0; i < 2; i++) {
                    var div1 = $('<div class="row" style="display:flex; justify-content:space-around;"></div>');
                    div1.append('<div id="gauge' + (i * 5 + 0) + '" class="sys-box" style="background-color:black;width:180px;margin:0px;padding:0px;"></div>')
                    div1.append('<div id="gauge' + (i * 5 + 1) + '" class="sys-box" style="background-color:black;width:180px;margin:0px;padding:0px;"></div>')
                    div1.append('<div id="gauge' + (i * 5 + 2) + '" class="sys-box" style="background-color:black;width:180px;margin:0px;padding:0px;"></div>')
                    div1.append('<div id="gauge' + (i * 5 + 3) + '" class="sys-box" style="background-color:black;width:180px;margin:0px;padding:0px;"></div>')
                    div1.append('<div id="gauge' + (i * 5 + 4) + '" class="sys-box" style="background-color:black;width:180px;margin:0px;padding:0px;"></div>')
                    $("#gaugechart").append(div1);
                }

                for (var i = 0; i < (result.Data.length-1); i++) {//result.data.length
                    //console.log(result.Data[i]);
                    var gaugedata = {
                        name: result.Data[i].CustomerName + '_' + result.Data[i].QTY + '/' + result.Data[i].LimitationQTY,
                        min: 0,
                        max: result.Data[i].LimitationQTY,
                        value: Math.round((result.Data[i].QTY / result.Data[i].LimitationQTY) * 100),
                        percent: result.Data[i].TargetPercentage / 100
                    }
                    var divname = 'gauge' + i;
                    //console.log(divname);
                    gaugechart(divname, gaugedata, "test");
                    //console.log(i,0);
                }

            });
            //console.log('before getmrbdata1');
            getmrbdata1();
            //console.log('after getmrbdata1');
            layer.closeAll('loading');
        }
         function getmrbdata1() {
            $.post('/pack/picloadb17pack', null, function (result) {
               // console.log(result);
                linqobj = null;
                linqprice = null;
                linqobj = jslinq(result.data);
                linqprice = jslinq(result.price);
                let totalprice = linqprice.sum(function (el) { return el.Total })
                $("#FGInventory").html('FG Inventory Dashboard_(Total:' + fmoney( totalprice,2)+')');
                var seriesdata = [];
                var agingdata = [];
                var total = linqobj.count();
                var part0 = linqobj.where(function (el) {
                    return el.Days7 <= 0;
                }).count();
                seriesdata.push({
                    value: part0, name: '<= 14 Days'
                })
                var part7 = linqobj.where(function (el) {
                    return el.Days7 > 0;
                }).count();
                seriesdata.push({
                    value: part7, name: '> 14 Days'
                })

                var aging0 = linqprice.where(function (el) {
                    return el.Days03 > 0;
                }).sum(function (el) {
                    return el.Days03;
                });

                agingdata.push({
                    value: Math.round(aging0), name: '< 7 Aging'
                })
                var aging3 = linqprice.where(function (el) {
                    return el.Days37 > 0;
                }).sum(function (el) {
                    return el.Days37;
                });
                agingdata.push({
                    value: Math.round(aging3), name: '7~14 Aging'
                })
                var aging7 = linqprice.where(function (el) {
                    return el.Days7 > 0;
                }).sum(function (el) {
                    return el.Days7;
                });
                agingdata.push({
                    value: Math.round(aging7), name: '> 14 Aging'
                })
               barchart("moneybar", result.price, "test");
            })
        }
        function gaugechart(chartdiv, gdata, title) {
            //console.log(gdata);
            var colorTemplate1 = [[0.2, "rgba(0,255,0,1)"], [gdata.percent, "rgba(255,255,0,1)"], [1, "rgba(255,0,0,1)"] ];

            var chart = echarts.init(document.getElementById(chartdiv));
            var option = {

                backgroundColor: "black",

                tooltip: {				// 本系列特定的 tooltip 设定。
                    show: true,
                    formatter: "{b}：{c}%",
                    backgroundColor: "rgba(50,50,50,0.7)",	// 提示框浮层的背景颜色。注意：series.tooltip 仅在 tooltip.trigger 为 'item' 时有效。
                    borderColor: "#333",		// 提示框浮层的边框颜色。...
                    borderWidth: 0,				// 提示框浮层的边框宽。...
                    padding: 5,					// 提示框浮层内边距，单位px，默认各方向内边距为5，接受数组分别设定上右下左边距。...
                    textStyle: {				// 提示框浮层的文本样式。...
                        // color ,fontStyle ,fontWeight ,fontFamily ,fontSize ,lineHeight ,.......
                    },
                },

                series: [
                    {
                        name: "使用率",		// 系列名称,用于tooltip的显示，legend 的图例筛选，在 setOption 更新数据和配置项时用于指定对应的系列。
                        type: "gauge",			// 系列类型
                        radius: "99%",			// 参数:number, string。 仪表盘半径,默认 75% ，可以是相对于容器高宽中较小的一项的一半的百分比，也可以是绝对的数值。
                        center: ["50%", "50%"],	// 仪表盘位置(圆心坐标)
                        startAngle: 225,		// 仪表盘起始角度,默认 225。圆心 正右手侧为0度，正上方为90度，正左手侧为180度。
                        endAngle: -45,			// 仪表盘结束角度,默认 -45
                        clockwise: true,		// 仪表盘刻度是否是顺时针增长,默认 true。
                        min: 0,					// 最小的数据值,默认 0 。映射到 minAngle。
                        max: 100,				// 最大的数据值,默认 100 。映射到 maxAngle。
                        splitNumber: 10,		// 仪表盘刻度的分割段数,默认 10。

                        axisLine: {				// 仪表盘轴线(轮廓线)相关配置。
                            show: true,				// 是否显示仪表盘轴线(轮廓线),默认 true。
                            lineStyle: {			// 仪表盘轴线样式。
                                color: colorTemplate1, 	//仪表盘的轴线可以被分成不同颜色的多段。每段的  结束位置(范围是[0,1]) 和  颜色  可以通过一个数组来表示。默认取值：[[0.2, '#91c7ae'], [0.8, '#63869e'], [1, '#c23531']]
                                opacity: 1,					//图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形。
                                width:18,					//轴线宽度,默认 30。
                               // shadowBlur: 20,				//(发光效果)图形阴影的模糊大小。该属性配合 shadowColor,shadowOffsetX, shadowOffsetY 一起设置图形的阴影效果。
                                shadowColor: "#fff",		//阴影颜色。支持的格式同color。
                            }
                        },

                        splitLine: {			// 分隔线样式。
                            show: true,				// 是否显示分隔线,默认 true。
                            length: 18,				// 分隔线线长。支持相对半径的百分比,默认 30。
                            lineStyle: {			// 分隔线样式。
                                color: "#eee",				//线的颜色,默认 #eee。
                                opacity: 1,					//图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形。
                                width: 2,					//线度,默认 2。
                                type: "solid",				//线的类型,默认 solid。 此外还有 dashed,dotted
                                shadowBlur: 2,				//(发光效果)图形阴影的模糊大小。该属性配合 shadowColor,shadowOffsetX, shadowOffsetY 一起设置图形的阴影效果。
                                shadowColor: "#fff",		//阴影颜色。支持的格式同color。
                            }
                        },

                        axisTick: {				// 刻度(线)样式。
                            show: true,				// 是否显示刻度(线),默认 true。
                            splitNumber: 5,			// 分隔线之间分割的刻度数,默认 5。
                            length: 8,				// 刻度线长。支持相对半径的百分比,默认 8。
                            lineStyle: {			// 刻度线样式。
                                color: "#eee",				//线的颜色,默认 #eee。
                                opacity: 1,					//图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形。
                                width: 0.6,					//线度,默认 1。
                                type: "solid",				//线的类型,默认 solid。 此外还有 dashed,dotted
                                shadowBlur: 8,				//(发光效果)图形阴影的模糊大小。该属性配合 shadowColor,shadowOffsetX, shadowOffsetY 一起设置图形的阴影效果。
                                shadowColor: "#fff",		//阴影颜色。支持的格式同color。
                            },
                        },

                        axisLabel: {			// 刻度标签。
                            show: true,				// 是否显示标签,默认 true。
                            distance: 5,			// 标签与刻度线的距离,默认 5。
                            color: "#fff",			// 文字的颜色,默认 #fff。
                            fontSize: 8,			// 文字的字体大小,默认 5。
                            formatter: "{value}",	// 刻度标签的内容格式器，支持字符串模板和回调函数两种形式。 示例:// 使用字符串模板，模板变量为刻度默认标签 {value},如:formatter: '{value} kg'; // 使用函数模板，函数参数分别为刻度数值,如formatter: function (value) {return value + 'km/h';}
                        },

                        pointer: {				// 仪表盘指针。
                            show: true,				// 是否显示指针,默认 true。
                            length: "70%",			// 指针长度，可以是绝对数值，也可以是相对于半径的百分比,默认 80%。
                            width: 5,				// 指针宽度,默认 8。
                        },

                        itemStyle: {			// 仪表盘指针样式。
                            color: "auto",			// 指针颜色，默认(auto)取数值所在的区间的颜色
                            opacity: 1,				// 图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形。
                            borderWidth: 0,			// 描边线宽,默认 0。为 0 时无描边。
                            borderType: "solid",	// 柱条的描边类型，默认为实线，支持 'solid', 'dashed', 'dotted'。
                            borderColor: "#000",	// 图形的描边颜色,默认 "#000"。支持的颜色格式同 color，不支持回调函数。
                            shadowBlur: 10,			// (发光效果)图形阴影的模糊大小。该属性配合 shadowColor,shadowOffsetX, shadowOffsetY 一起设置图形的阴影效果。
                            shadowColor: "#fff",	// 阴影颜色。支持的格式同color。
                        },

                        emphasis: {				// 高亮的 仪表盘指针样式
                            itemStyle: {
                                //高亮 和正常  两者具有同样的配置项,只是在不同状态下配置项的值不同。
                            }
                        },

                        title: {				// 仪表盘标题。
                            show: true,				// 是否显示标题,默认 true。
                            offsetCenter: [0, "80%"],//相对于仪表盘中心的偏移位置，数组第一项是水平方向的偏移，第二项是垂直方向的偏移。可以是绝对的数值，也可以是相对于仪表盘半径的百分比。
                            color: "#fff",			// 文字的颜色,默认 #333。
                            fontSize:16,			// 文字的字体大小,默认 15。
                        },

                        detail: {				// 仪表盘详情，用于显示数据。
                            show: true,				// 是否显示详情,默认 true。
                            offsetCenter: [0, "50%"],// 相对于仪表盘中心的偏移位置，数组第一项是水平方向的偏移，第二项是垂直方向的偏移。可以是绝对的数值，也可以是相对于仪表盘半径的百分比。
                            color: "auto",			// 文字的颜色,默认 auto。
                            fontSize: 18,			// 文字的字体大小,默认 15。
                            formatter: "{value}%",	// 格式化函数或者字符串
                        },

                        data: [{
                            name: gdata.name,
                            value: gdata.value,
                        }]
                    }
                ]
            };
            chart.setOption(option, true);
        }

        function piechart(chartdiv, legendData, seriesdata, colors, title) {
            var chart = echarts.init(document.getElementById(chartdiv));
            option = {
                color: colors,
                title: {
                    text: title,
                    left: 'auto',
                    top: 'top',
                    textStyle: {
                        color: '#fff',
                    },
                },
                tooltip: {
                    trigger: 'item',
                    formatter: '{a} <br/>{b} : {c} ({d}%)'
                },
                legend: {
                    textStyle: {
                        color: '#fff',
                    },
                    orient: 'horizontal',
                    bottom: '1',
                    data: legendData,
                    height: 2,
                    itemWidth: 8,
                    itemHeight: 5,
                    itemGap: 3,
                },
                series: [
                    {
                        top: 0,
                        height: "auto",
                        name: 'Status',
                        type: 'pie',
                        radius: '55%',
                        center: ['50%', '60%'],
                        data: seriesdata,
                        emphasis: {
                            itemStyle: {
                                shadowBlur: 10,
                                shadowOffsetX: 0,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        },
                        labelLine: {
                            normal: {
                                length: 2,  // 改变标示线的长度
                                lineStyle: {
                                    color: "#fff"  // 改变标示线的颜色
                                }
                            },
                        },
                        label: {
                            position: 'inner', //标签的位置
                            normal: {
                                show: true,
                                // formatter: '{b} : {c} ({d}%)'
                                formatter: '{d}%'
                            },
                            labelLine: { show: true }
                        },
                    }
                ]
            };
            chart.setOption(option);
        }

        function barchart(chartdiv, data, title) {
            linqobj = null;
            linqobj = jslinq(data);
            console.log(data);
            var chart = echarts.init(document.getElementById(chartdiv));
            var legenddata = linqobj.select(function (el) {
                return el.Project;
            }).toList();
            var seriesdata = [];

            seriesdata.push({
                name: '<7Days',
                type: 'bar',
                stack: 'ttt',
                itemStyle: {
                    color: 'blue',
                },
                label: {
                    show: true,
                    position: 'inside',
                    color: 'white',
                },
                barWidth: 99,
                data: linqobj.select(function (el) {
                    return el.Days03;
                }).toList()

            });
            seriesdata.push({
                name: '7~14Days',
                type: 'bar',
                stack: 'ttt',
                itemStyle: {
                    color: 'yellow',
                },
                label: {
                    show: true,
                    position: 'inside',
                    color: 'white',
                },
                barWidth: 99,
                data: linqobj.select(function (el) {
                    return el.Days37;
                }).toList()
            });
            seriesdata.push({
                name: '>14Days',
                type: 'bar',
                stack: 'ttt',
                itemStyle: {
                    color: 'red',
                },
                label: {
                    show: true,
                    position: 'inside',
                    color: 'white',
                },
                barWidth: 99,
                data: linqobj.select(function (el) {
                    return el.Days7;
                }).toList()
            });

            seriesdata.push(
                {
                    name: '总计',
                    type: 'bar',
                    stack: 'ttt',
                    label: {
                        normal: {
                            offset: ['50', '80'],
                            show: true,
                            position: 'insideBottom',
                            formatter: '{c}',
                            textStyle: {
                                color: '#02FCFA',
                                fontWeight: 'bold',
                                fontStyle:'oblique'
                            },

                        },

                    },
                    itemStyle: {
                        normal: {
                            color: 'rgba(128, 128, 128, 0)'
                        }
                    },
                    data: linqobj.select(function (el) {
                        return el.Total;
                    }).toList()
            });


            option = {
                tooltip: {
                    trigger: 'axis',
                    axisPointer: {            // 坐标轴指示器，坐标轴触发有效
                        type: 'shadow'        // 默认为直线，可选为：'line' | 'shadow'
                    }
                },
                legend: {
                    show: true,
                    bottom: "bottom",
                    x: 'center',      //可设定图例在左、右、居中
                    y: '472px',     //可设定图例在上、下、居中
                    textStyle: {
                        color: '#fff',
                    },
                    data: ['<7Days', '7~14Days', '>14Days']
                },
                grid: {
                    top:'2%',
                    left: '3%',
                    right: '4%',
                    bottom: '3%',
                    containLabel: true
                },
                xAxis: [
                    {
                        type: 'category',
                        axisLine: {
                            lineStyle: {
                                color: '#fff',
                            },
                        },
                        axisLabel: {
                            rotate: 45,
                        },
                        data: legenddata
                    }
                ],
                yAxis: [
                    {
                        type: 'value',
                        axisLine: {
                            lineStyle: {
                                color: '#fff',
                            },
                        },
                    }
                ],
                series: seriesdata
            };
            chart.setOption(option);
        }

        function fmoney(s, n) {
            n = n > 0 && n <= 20 ? n : 2;
            s = parseFloat((s + "").replace(/[^\d\.-]/g, "")).toFixed(n) + "";
            var l = s.split(".")[0].split("").reverse(),
                r = s.split(".")[1];
            t = "";
            for (i = 0; i < l.length; i++) {
                t += l[i] + ((i + 1) % 3 == 0 && (i + 1) != l.length ? "," : "");
            }
            return t.split("").reverse().join("") + "." + r;
        }
    </script>
</body>
</html>

