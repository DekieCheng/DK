<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="ImageList1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="ImageList1.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj0yLjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAAAM
        EgAAAk1TRnQBSQFMAwEBAAEIAQABCAEAARwBAAEcAQAE/wEZAQAI/wFCAU0BNgcAATYDAAEoAwABcAMA
        ARwDAAEBAQABGAUAAcABJBIAAesBqwEAAesBqwEAAesBqwEAAesBqwEAAesBqwEAAesBqwEAAesBqwEA
        AeoBqwEBAecBqwEFAeYBqQEGAekBqAEIAegBqgEIAeYBqgEGAeoBqwEEAesBrAEBAesBqwEAAesBqwEA
        AesBqwEAAesBqwEAAesBqwEAAesBqwEAAesBqwEAAesBqwEAAesBqwEAAesBqwEAAesBqwEAAesBqwEA
        AesBq/0AAesBqwEAAesBqwEAAesBqwEAAesBqwEAAesBqwEAAesBqwEAAesBqwEAAeEBpwENAeYBwgFe
        AecBxAFfAekBwwFhAegBwgFjAeUBxAFfAeUBvgFNAeQBpwEJAesBqwEAAesBqwEAAesBqwEAAesBqwEA
        AesBqwEAAesBqwEAAesBqwEAAesBqwEAAesBqwEAAesBqwEAAesBqwEAAesBqwEAAesBq/0AAesBqwEA
        AesBqwEAAesBqwEAAesBqwEAAesBqwEAAesBqwEAAesBqwEAAdUBoQEcAf8B/gHuAf4B/wH2Af4B/wH3
        Af0B/gH4AfwB/wH1AfwB+AHMAdwBogESAesBqgEBAesBqwEAAesBqwEAAesBqwEAAesBqwEAAesBqwEA
        AesBqwEAAesBqwEAAesBqwEAAesBqwEAAesBqwEAAesBqwEAAesBq/0AAesBqgEBAesBqgEBAesBqgEB
        AesBqgEBAeoBqgEAAesBqgEBAewBqwEBAdYBoAEXAf0B+wHkAfwB/wH+Af0C/gH9BP4B+gH4Ae0BrQHd
        AaUBCwHrAasBAAHrAasBAAHrAasBAAHrAasBAAHrAasBAAHrAasBAAHrAasBAAHrAasBAAHqAaoBAAHr
        AasBAAHqAaoBAAHrAasBAAHrAav9AAHsAaoBAQHqAaoBAwHnAakBBgHnAakBBwHmAagBBwHmAagBBwHm
        AagBBgHYAaIBGQH4AfQBzgH9Af4B+wH+Af0B/wH+A/8B/gH6AegBygFvAeIBqAEOAeYBqAEGAeYBqQEG
        AeYBqQEGAecBqQEGAecBqgEEAeoBqwEBAewBqwEAAesBqwEAAeoBqwEBAecBqQEDAegBqQEDAeoBqwEB
        AesBq/0AAe8BqgEAAdgBrAEmAfYB6QGpAfsB8wHDAfsB8wHEAfsB8wHFAfsB8wHHAfoB8gHMAf4B/QHw
        Av8B/QH/Af4G/wH9AfsB9gHaAfsB8wHGAfsB8wHHAfsB8wHDAfsB8wHCAfsB8wHCAfMB2AGFAecBrgEZ
        Ae4BrAEAAekBqwECAecBtAEiAfQB2QF0AfMBzQFhAesBrQEYAeoBqAED/AAB6QGrAQEB9gHaAYkB/wH+
        AfMB/wL+Af8B/QH/Av4B/AH7Af8B+gH9Gv8B/gL/Af4E/wH9Av8B6gHNAaIBPAHlAacBDQHZAakBOwHW
        AbgBcAHwAesBygHoAdwBsAHXAbUBXQHUAaYBH/wAAe8BpwEFAfkB8gHAAfwB/wH8Af0C/gL/Af4C/wH8
        Af8C/gH/Af4B/wH9Av8B/QL/Af0C/wH9Av8B/QL/Af0C/wH9A/8D/gH/Af4B/AH+Av8B/QL/Af4B8gHb
        AbsBYQHVAaEBEQH+AfgBygH/AfwB6AH/AfwB7AH/AfsB7AH/AfsB4gH3AfEBsPwAAfIBqQEEAfoB8gHC
        AfwC/gL9Af8B/gH/Af0C/wH+Af0B/gH/Af0B/hb/Af4C/wH7Af8B/gH7Af8D/gL/Af4B7wHcAb4BYwHc
        AaEBEgH2Ad8BjgHxAdQBegHxAdMBeQHyAdEBfAHzAdMBeAH2Ae0BnfwAAe4BqAECAfsB9AHAAv4B/AH+
        Af0C/gH/Bf4B/QH+AfwB/gH8Av8B/gL/Af4C/wH+Av8B/gL/Af4C/wH+Av8B/gH9Af4B/wH8Af8C/QH/
        AfsC/wH9Av8B8QHbAbwBYwHfAaIBDgHqAb4BTAHdAasBHgHeAbQBPQHhAbgBRAHeAakBIAHyAeUBg/wA
        AekBqgEBAfoB8wG8AfoB9gHdAfEB5wG/AfQB6QG8AfUB6QG5AfYB6AG5AfQB6QG3AfQB6AG7AfQB6AG7
        AfQB6AG7AfQB6AG7AfQB6AG7AfQB6AG7AfQB6AG7AfUB6AG7AfUB6AG7AfQB6QG5AfMB6gHDAfwB+QHh
        Ad4BvAFlAd4BowELAfMBwQFKAe0BtAElAfYBzwFeAfYB0QFnAekBrwEpAfMB5QGB/AAB7AGqAQUB+gHy
        AbgB9QHlAZ4B4QGyATQB6wG4ASoB7AG4ASgB7wG2ASoB6wG3ASkB7QG3ASkB7QG3ASkB7QG3ASkB7QG3
        ASkB7QG3ASkB7QG3ASkB7QG3ASkB7QG4ASgB7gG1ASoB6wG2ASgB4gG8AUYB9QHsAbYB4gG7AWUB2gGg
        AQkB7AHCAVEB3AGoASsB3gGwATsB4AGuAToB3AGlASsB8gHmAYb8AAHxAacBBwH6AfMBtwH1Ad8BiwHj
        AaUBDQHrAasBAAHpAasBAQHsAaoBAQHpAa0BAQHrAawBAAHrAawBAAHrAawBAAHrAawBAAHrAawBAAHr
        AawBAAHrAawBAAHtAasBAAHsAaoBAgHrAasBAQHgAa8BIwH0AegBrQHfAboBZwHcAZ8BDAH0AeUBhgH1
        AekBlQH1AegBlgH1AegBlwH1AegBlAH1Ac8BXvwAAe0BqQEEAfoB8QG2AfQB4AGJAeABpQELAesBqwEA
        AeoBqwEAAekBrAEAAesBqwEAAesBqwEAAesBqwEAAesBqwEAAesBqwEAAesBqwEAAesBqwEAAesBqwEA
        Ae4BqwEAAekBqgECAeoBqgECAeEBsAEiAfQB6QGsAd8BuQFmAeoBqwEAAeoBqwEAAe0BrAEAAesBqwEB
        AekBqQEEAegBqQEEAewBqgEB/AAB7QGpAQQB+gHxAbYB9AHgAYkB4AGlAQsB6wGrAQAB6gGrAQAB6QGs
        AQAB6wGrAQAB6wGrAQAB6wGrAQAB6wGrAQAB6wGrAQAB6wGrAQAB6wGrAQAB6wGrAQAB7AGrAQAB6AGr
        AQEB7AGrAQAB5AGvASIB9QHpAaoB2QG8AWEB5QGrAQEB6QGoAQUB6wGpAQMB7AGrAQEB7QGtAQAB7AGs
        AQAB6wGs/QAB7QGpAQQB+gHxAbYB9AHgAYkB4AGlAQsB6wGrAQAB6gGrAQAB6QGsAQAB6wGrAQAB6wGr
        AQAB6wGrAQAB6wGrAQAB6wGrAQAB6wGrAQAB6wGrAQAB6wGrAQAB6wGrAQAB6QGqAQEB6gGqAQIB5QGt
        ASYB9gHoAaoB1wG+AV8B5QGtAQEB6gGrAQEB6QGqAQMB7gGqAQEB7gGsAQAB6gGtAQAB7wGqAQP8AAHt
        AakBBAH6AfEBtgH0AeABiQHgAaUBCwHrAasBAAHqAasBAAHpAawBAAHrAasBAAHrAasBAAHrAasBAAHr
        AasBAAHrAasBAAHrAasBAAHrAasBAAHrAasBAAHsAawBAAHqAasBAAHpAasBAAHjAa4BJAH2AegBqgHY
        AbwBYQHqAaoBAgHtAaoBAQHrAasBCAHtAa8BFgHsAa4BDwHpAasBBAHuAaoBA/wAAe0BqQEEAfoB8QG2
        AfQB4AGJAeABpQELAesBqwEAAeoBqwEAAekBrAEAAesBqwEAAesBqwEAAesBqwEAAesBqwEAAesBqwEA
        AesBqwEAAesBqwEAAesBqwEAAe8BrAEAAesBqwEBAegBqgECAeMBrgElAfUB6AGsAdsBuwFjAewBrAED
        AeEBpgEKAeMBsAEtAfIB2AGCAesByQFfAd8BqgEYAecBqwEE/AAB7QGpAQQB+gHxAbYB9AHgAYkB4AGl
        AQsB6wGrAQAB6gGrAQAB6QGsAQAB6wGrAQAB6wGrAQAB6wGrAQAB6wGrAQAB6wGrAQAB6wGrAQAB6wGr
        AQAB6wGrAQAB7gGrAQAB6gGsAQAB6QGrAQEB5AGvASIB9gHpAasB3AG6AWIB4QGkAQwB8wHgAY4B9QHp
        AboB/QH7AecB+QH0AdQB9AHnAawB7wHJAVr8AAHtAakBBAH6AfEBtgH0AeABiQHgAaUBCwHrAasBAAHq
        AasBAAHpAawBAAHrAasBAAHrAasBAAHrAasBAAHrAasBAAHrAasBAAHrAasBAAHrAasBAAHrAasBAAHr
        AaoBAgHpAawBAAHsAasBAQHoAa4BJAH3AegBqgHaAbsBYAHTAZ4BFQH9AfoB1gL/AfEB/wH9AfcB/wH9
        AfUB/wH+Ae0B9wHwAbT8AAHuAacBCQH6AfMBtAH0AeABhgHhAaUBDAHtAaoBAQHsAasBAAHrAasBAAHp
        AaoBAgHpAasBAQHpAasBAQHpAasBAQHpAasBAQHpAasBAQHpAasBAQHpAasBAQHpAawBAAHoAa0BAQHu
        AakBAwHnAawBJAH2AegBpwHZAboBYgHYAaABEwHhAbUBTAHMAZoBIwHEAZUBKQHHAZgBJQHEAZoBIAHu
        AeUBk/wAAe0BpQEGAfoB8QG2AfUB4QGGAeIBpgEOAeoBqgECAekBqwEBAewBqgEBAe8BqgEAAesBqwEA
        AesBqwEAAesBqwEAAesBqwEAAesBqwEAAesBqwEAAesBqwEAAe4BqwEAAeoBqwEBAesBqgEDAeQBrwEj
        AfUB6QGkAd8BuwFhAd8BogERAfEBwAFKAeQBqwEgAesBxAFSAewBvQE/AeYBqgEYAfQB5wGN/AAB8AGp
        AQQB+QHzAbkB8gHgAZAB2AGhARcB3wGoAQsB3wGoAQoB4AGoAQoB5QGnAQoB4QGnAQoB4gGnAQoB4gGn
        AQoB4gGnAQoB4gGnAQoB4gGnAQoB4gGnAQoB5QGmAQoB5AGnAQoB4gGmAQsB2wGtAS0B8wHoAa0B3QG9
        AWIB3QGiAQkB7AHCAUYB5gGzASYB8wHWAWUB7AHEAUoB5wGuARsB9AHmAZD8AAHuAakBAwH5AewBrgH0
        AewBwQHcAcQBfgHgAccBdAHhAccBdAHgAccBdAHhAccBdQHhAccBdAHhAccBdAHhAccBdAHhAccBdQHi
        AccBdQHiAccBdQHiAccBdQHiAcYBdQHiAccBdAHiAcYBcwHhAcsBigH2AfEBzQHZAbYBWQHdAaMBCwHx
        Ac4BWQHoAb4BOAHvAcsBUAHsAcIBRQHoAboBMwH0AeUBhvwAAeoBqgEBAeMBxAFlAf0B/AHXAv8B5AL/
        AeQC/wHlAv8B5QL/AeUC/wHjAv8B4wL/AeMC/wHkAv8B5AL/AeQC/wHkAv8B5AL/AeQC/wHjAv8B4wH8
        AfIBwQHeAa8BNQHiAaUBCQHkAbkBQwHZAbIBPgHYAbIBPgHZAbEBQQHbAbEBPwHmAb8BPPwAAesBrAEA
        Ad8BpwESAeABuQFRAeIBwQFoAeABwAFrAd0BwAFrAdwBwgFoAd4BwQFqAd4BvwFrAd4BvwFrAd4BvwFr
        Ad4BvwFrAd4BvwFrAd4BvwFrAd4BvwFrAeEBwQFqAd8BvwFtAd0BvwFsAd4BwAFkAd8BtwFAAecBrAEM
        AekBrAEEAeUBpwEJAeQBpgEKAeIBpwELAeIBpQENAeMBpQEMAeUBqgEH/AAB7QGpAQIB7QGqAQAB6QGp
        AQYB6gGqAQoB6QGqAQkB6AGqAQgB5AGrAQgB6AGpAQgB6AGpAQkB6AGpAQkB6AGpAQkB6AGpAQkB6AGp
        AQkB6AGpAQkB6AGpAQkB6gGpAQgB6AGpAQkB5wGpAQsB5wGqAQgB5gGqAQQB6wGoAQEB6wGrAQIB7AGu
        AQAB7gGrAQAB7QGrAQIB6wGtAQEB6wGtAQAB5wGv/QAB8QGqAQYB6AGsAQAB4gGtAQAB5QGqAQEB6AGr
        AQEB6QGqAQEB5gGrAQAB7AGoAQMB6AGrAQAB6AGrAQAB6AGrAQAB6AGrAQAB6AGrAQAB6AGrAQAB6AGr
        AQAB6AGrAQAB5gGuAQAB5QGsAQAB7QGpAQEB7AGpAQAB7AGqAQEB7QGpAQIB5QGrAQAB5QGsAQAB7AGr
        AQAB7QGrAQAB7QGvAQAB6QGr/QABQgFNAT4HAAE+AwABKAMAAXADAAEcAwABAQEAAQEFAAHAAQEWAAP/
        /wDCAAs=
</value>
  </data>
</root>